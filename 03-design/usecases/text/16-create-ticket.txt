@startuml
title Buy Ticket Successful - User

actor User
boundary "Web Browser" as w
boundary "newView" as view
boundary "DispatchServlet" as d
entity "__model: Model__" as m
control ":TicketSystem" as ES
participant ":TicketRepository" as TRepo
entity "__ticket: Ticket__" as ticket
participant ":TicketService" as TS


participant ":EventService" as EventService
entity "__:event: Event__" as Event
participant "EventRepository" as EventRepo


== 1. The User selects the "Buy" option on the event page ==
User -> w: Click "Buy"
w -> d: POST /buyTicket (url: String, data: JSON)
activate d


d -> ES: buyTicket(event: Event, custormer: User, types: String[*], num: int[*], m: Model)
activate ES

note over ES: Validate event and ticket availability
ES -> TS: isTicketAvailable(event, types, num)
activate TS

TS -> TRepo: findNum(event, types)
TRepo --> TS: return availableTicketsNum

TS --> ES: return ture


ES -> TS: buyTicket(event: Event, custormer: User, types: String[*], num: int[*])

loop for each type and num of ticket be bought

    create ticket
    TS -> ticket: Ticket(type: Type pirce: double, customer: User, event: Event)
    activate ticket
    ticket --> TS: return ticket
    deactivate ticket

    TS -> TRepo: save(ticket)


    

end

TS --> ES: return Error.NONE
deactivate TS

ES -> EventService: reduceQuantity(type, num)
activate EventService
EventService -> Event: setQuantity(availableTickets - numOfbuy: int)
EventService -> EventRepo: save(event)
EventService --> ES
deactivate EventService



ES -> m: addAttribute("ticket", savedTicket)

ES -> d: return "purchaseSuccessPage"
deactivate ES
create view
d -> view: View(model: Model)
view --> d
d --> w: return newView
deactivate d


== 2. The system redirects the user to purchase successful page ==
@enduml