@startuml
title Buy Ticket Successful - User

actor User
boundary "Web Browser" as w
boundary "newView" as view
boundary "__:DispatchServlet__" as d
entity "__model: Model__" as m
control "__:EventSystem__" as ES
participant "__:TicketRepository__" as TRepo
entity "__ticket: Ticket__" as ticket
participant "__:EventRepository__" as EventRepo
participant "__:TicketService__" as TS


participant "__:EventService__" as EventService
entity "__:event: Event__" as Event
entity "__:user: User__" as user

participant "__:AccountService__" as accSer
entity "__tq:TicketQuantity__" as tq
participant " __:UserRepository__" as UserRepository



== 1. The User selects the "Buy" option on the event page ==
User -> w: Click "Buy"
activate w
w -> d: POST /buyTicket (url: String, data: JSON)
activate d



d -> ES: buyTicket(eventId: int, userEmail: int, types: String[*], num: int[*], m: Model)
activate ES

ES -> EventService: e := getEvent(eventId: int)
activate EventService
EventService -> EventRepo: e:=findById(eventId: int)
EventService --> ES: return e
deactivate EventService

note over ES: Validate event and ticket availability
ES -> TS: isTicketAvailable(e: Event, types: Type[*], num: int[*])

activate TS
loop for each type
    TS -> Event: getTicketAvailable()
    activate Event
    Event --> TS: return availableTicketsNum
end
deactivate Event


TS --> ES: return ture
deactivate TS

ES -> accSer: user = getAccount(userEmail: String)
activate accSer
accSer -> UserRepository: user = findByEmail(email: String)
accSer --> ES: return user
deactivate accSer


ES -> TS: buyTicket(event: Event, user: User, types: String[*], num: int[*])
activate TS

loop for each type and num of ticket be bought

    create ticket
    TS -> ticket: Ticket(type: Type pirce: double, user: User, event: Event)
    activate ticket
    ticket --> TS: return ticket
    deactivate ticket

    TS -> TRepo: save(ticket: Ticket)

    TS -> Event: reduceQuantity(type: Type, num: int)
    activate Event
    Event -> tq: reduceQuantity(quantity: int)
    Event --> TS
    deactivate Event
    TS -> EventRepo: save(event: Event)

end

TS --> ES: return tickets
deactivate TS

ES -> user: addTickets(tickets)
ES -> UserRepository: save(user)





ES -> m: addAttribute("ticketList": String, tickets: Ticket[*])

ES -> d: return "Buy ticketList"
deactivate ES
create view
d -> view: View(model: Model)
activate view
view --> d
deactivate view
d --> w: return newView

deactivate d


== 2. The system redirects the user to purchase successful page ==
@enduml