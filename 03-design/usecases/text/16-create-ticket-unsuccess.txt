@startuml
title Buy Ticket unsuccessful 

actor User
boundary "Web Browser" as w
boundary "newView" as view
boundary "__:DispatchServlet__" as d
entity "__model: Model__" as m
control "__:EventSystem__" as ES
participant "__:TicketRepository__" as TRepo
entity "__ticket: Ticket__" as ticket
participant "__:EventRepository__" as EventRepo
participant "__:TicketService__" as TS


participant "__:EventService__" as EventService
entity "__:event: Event__" as Event

participant "__:AccountService__" as accSer
entity "__tq:TicketQuantity__" as tq
participant " __:UserRepository__" as UserRepository



== 1. The User selects the "Buy" option on the event page ==
User -> w: Click "Buy"
activate w
w -> d: POST /buyTicket (url: String, data: JSON)
activate d



d -> ES: buyTicket(eventId: int, userEmail: int, types: String[*], num: int[*], m: Model)
activate ES

ES -> EventService: event := getEvent(eventId)
activate EventService
EventService -> EventRepo: e:=findById(eventId: int)
EventService --> ES: return e
deactivate EventService

note over ES: Validate event and ticket availability
ES -> TS: isTicketAvailable(event, types, num)

activate TS
TS -> Event: getTicketAvailable()
activate Event
Event --> TS: return availableTicketsNum
deactivate Event


TS --> ES: return flase
deactivate TS

ES -> m: addAttribute("ErrorMessage": String)
ES --> d: return "purchase unsuccessful page"
deactivate ES
create view
d -> view:View(model: Model)
activate view
view --> d
deactivate view
d --> w: return newView
deactivate d
==2.The system redirect the user to purchase unsuccessful page==
@enduml
