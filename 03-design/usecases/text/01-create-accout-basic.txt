@startuml
title Create Accout - Basic Course of Events

actor "User" as us
boundary "Web Browser" as w
boundary "newView: View" as view
boundary "DispatchServlet" as d
entity "__model: Model__" as m
control ": __AccountSystem__" as accountSys
entity "__user: UserAccount__" as userAcc
entity "__organizer: Organizer__" as organizerAcc
entity "__admin: Admin__" as AdminAcc
participant "AccountRepository" as accountRepo
participant ": __AccountService__" as accountSer




== 1. The user clicks the "create" button .\n 2. The system navigates to the account creation page. \n 3. The user enters the required account details for the new user/Organizer/admin.  ==
us -> w: Click "Create Accout"
activate w
w -> d: POST /createAccount (url: String, data: JSON)
activate d

note over d: The DispatchServlet is responsible for receiving requests \nand parsing the data to generate AccountDTO objects
d -> accountSys: createAccount(type: accountType, name: String, password: String, m: Model)
activate accountSys

accountSys -> accountSer: getAccount(email: String)
activate accountSer
accountSer -> accountRepo: findByEmail(email: String)
activate accountRepo
accountRepo --> accountSer: return null
deactivate accountRepo
accountSer --> accountSys: return null
deactivate accountSer

accountSys -> accountSer: createAccount(type: AccountType, username: String, password: String, email: String)
activate accountSer
create userAcc
alt type == "User"
    accountSer -> userAcc: new User(username: String, password: String, email: String)
    activate userAcc
    userAcc --> accountSer: return user
    deactivate userAcc
    accountSer -> accountRepo: save(user)
else type == "Organizer"
    create organizerAcc
    accountser -> organizerAcc: new Organizer(username: String, password: String, email: String)
    activate organizerAcc
    organizerAcc --> accountSer: renturn organizer
    deactivate organizerAcc
    accountSer -> accountRepo: save(organizer)
else type == "admin"
    create AdminAcc
    accountSer -> AdminAcc: new Admin(username: String, password: String, email: String)
    activate AdminAcc
    AdminAcc --> accountSer: return admin
    deactivate AdminAcc
    accountSer -> accountRepo: save(admin)
end

accountSer --> accountSys: return Error.NONE
deactivate accountSer

accountSys -> accountSer: getAllAccounts()
activate accountSer

accountSer -> accountRepo: findAll()
accountRepo --> accountSer: return accounts
accountSer --> accountSys: return accounts
deactivate accountSer


accountSys -> m :addAttribute("accountList": String, accounts: List)

accountSys --> d: return "account list page"
deactivate accountSys
create view

d -> view: View(model: Model)

view --> d:
deactivate view

d --> w: return newView



== 4. The system renturn to account manage page.==
@enduml