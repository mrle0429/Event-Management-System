@startuml
title Create Accout - Basic Course of Events

actor "User" as us
boundary "Web Browser" as w
boundary "__: newView: View__" as view
boundary "__:DispatchServlet__" as d
entity "__m: Model__" as m
control ": __AccountSystem__" as accountSys
entity "__user: UserAccount__" as userAcc
entity "__organizer: Organizer__" as organizerAcc
entity "__admin: Admin__" as AdminAcc
participant "__: UserRepository__" as userRepo
participant "__: AdminRepository__" as adminRepo
participant "__: OrganizerRepository__" as organizerRepo
participant ": __AccountService__" as accountSer




== 1. The user clicks the "create" button .\n 2. The system navigates to the account creation page. \n 3. The user enters the required account details for the new user/Organizer/admin.  ==
us -> w: Click "Create Accout"
activate w
w -> d: POST /createAccount (url: String, data: JSON)
activate d

note over d: The DispatchServlet is responsible for receiving requests \nand parsing the data to generate AccountDTO objects
d -> accountSys: createAccount(type: accountType, name: String, password: String, email: String, m: Model)
activate accountSys



accountSys -> accountSer: createAccount(type: AccountType, username: String, password: String, email: String)
activate accountSer
accountSer -> userRepo: a = findByEmail(email: String)

alt the value of a is null
    accountSer -> adminRepo: a = findByEmail(email: String)
end

alt the value of a is null
    accountSer -> organizerRepo: a = findByEmail(email: String)
end
create userAcc
alt type == "User"
    accountSer -> userAcc: new User(username: String, password: String, email: String)
    activate userAcc
    userAcc --> accountSer: return user
    deactivate userAcc
    accountSer -> userRepo: save(user)
else type == "Organizer"
    create organizerAcc
    accountSer -> organizerAcc: new Organizer(username: String, password: String, email: String)
    activate organizerAcc
    organizerAcc --> accountSer: renturn organizer
    deactivate organizerAcc
    accountSer -> organizerRepo: save(organizer)
else type == "admin"
    create AdminAcc
    accountSer -> AdminAcc: new Admin(username: String, password: String, email: String)
    activate AdminAcc
    AdminAcc --> accountSer: return admin
    deactivate AdminAcc
    accountSer -> adminRepo: save(admin)
end

accountSer --> accountSys: return Error.NONE
deactivate accountSer

accountSys -> accountSer: getAccounts()
activate accountSer

accountSer -> userRepo: findAll()
accountSer -> adminRepo: findAll()
accountSer -> organizerRepo: findAll()
accountSer --> accountSys: return allaccounts
deactivate accountSer


accountSys -> m :addAttribute("accountList": String, accounts: Account[*])

accountSys --> d: return "account list page"
deactivate accountSys
create view

d -> view: View(m: Model)

view --> d:
deactivate view

d --> w: return newView
deactivate d



== 4. The system renturn to account manage page.==
@enduml