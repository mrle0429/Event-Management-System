@startuml
title 14-Update-Event

actor "Organiser/Administrator" as OA
participant "Web Browser" as w
boundary "__newView: view__" as v
entity "__model: Model__" as m
boundary "__: DispatchServlet__" as ds
boundary "__alterATO: AlterDTO__" as dto
control ": EventSystem" as System
participant "__: EventRepository__" as er
participant ": VenueService" as VenueSer
participant ":EventService" as Service
entity "selected : Event" as Event
entity "ta : TicketAvailability" as ta
entity "tq : TicketQuantity" as tq

== 1. The organiser/administrator selects the relevant event from the display to be updated ==
note right of OA: This part of the functionality is completed in Javascript\nIt does not need to be shown here

== 2. The system displays a dialog to enter the event details\n3. The organiser/administrator updates the details of the event and clicks "Save" ==
OA -> w : interact
activate w
w -> ds : POST(url: String, payload: json)
activate ds

ds -> System : updateEvent(alterDTO: AlterDTO, model: Model)
activate System

System -> dto : uid: =getEventId()


System->Service:modifyEvent(eventName, eventDate, newEventDescription, \nnewEventTime, newTicketTypes : String[*], newTicketPrices : double[*])
activate Service
Service->Service: event := getEvent(eventName, eventDate)
Service->Event:venue := getVenue()


loop for all ticket types
  Service->ta:getName()
  Service->ta:getNumberAvailable()
  create tq
  Service->tq:TicketQuantity(newTypeName, numAvailable, newPrice)
end

Service->Event:setDescription(newEventDescription)
Service->Event:setTime(newEventTime)
Service->Event:setTicketQuantities(newTicketQuantities)

Service->Service:saveEvent(event)

Service-->System: return Error.NONE
deactivate Service

System->Service:event := getEvent(eventName, eventDate)

System->System:displayViewEventPage(event)

System --> ds : return "index"
deactivate System

create v
ds -> v : View(model : Model)
activate v
v --> ds
deactivate v
ds --> w : return newView
deactivate ds



== 4. The system updates the view to show the current events for the specified organiser/administrator, including the newly changed event ==
@enduml
