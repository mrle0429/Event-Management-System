@startuml
title 03-Update-Account(User)
actor "User" as u
participant "Web Browser" as w
boundary "__newView : View__" as nv
boundary "__nv2 : View__" as nv2
boundary "__: DispatchServlet__" as d
entity "__m : Model__" as m
entity "__m2 : Model__" as m2

control "__: AccountSystem__" as ac
entity "__adto : ModifyAccountDTO__" as adto

participant "__: CustomerRepository__" as cr
participant "__: AdminRepository__" as ar
participant "__: OrganiserRepository__" as or
participant "__: AccountService__" as as
entity "__: Account__" as a

==1. The user selects the modify account functionality on the view account page (06-view-account)==

u -> w: click()
activate w

w->d:GET(url : String, data : JSON)
activate d

d->ac:showModifyAccount(accountId : long, m : Model)
activate ac

ac -> as: getAccount(email : String)
activate as
as->cr:a := findByEmail(email : String)
alt the value of a is null
  as->ar:a := findByEmail(email : String)
end
alt the value of a is null
  as->or:a := findByEmail(email : String)
end
as-->ac:return a
deactivate as

ac->m: addAttribute("account" : String, a : Account)
create adto
ac -> adto : ModifyAccountDTO()
activate adto
adto-->ac:
deactivate adto
ac->m: addAttribute("accDTO" : String, adto : ModifyAccountDTO)

ac-->d:return "modify-account"
deactivate ac
create nv
d-> nv:create View(model : Model)
activate nv

nv-->d:
deactivate nv

d-->w:return newView
deactivate d

==2. The system displays the modify account page (07-modify-account) which shows the details of the selected account as editable fields\n3. The user enters the updated details of the account==

u -> w: click()

w->d:POST(url : String, data : JSON)
activate d

d->ac:modifyAccount(adto : ModifyAccountDTO, m2 : Model)

activate ac

ac -> as: a := getAccount(email : String)

ac -> as: modifyAccount(adto : ModifyAccountDTO, a : Account)

activate as
as->a:setName(newName : String)
as->a:setEmail(newEmail : String)
as->a:setName(newPassword : String)
note over a: At this point the object would need to be typecast
alt if the account is an organiser
  as -> a: setAddress(address : String)
  as -> a: setCompanyName(companyName : String)
  as -> a: setPhoneNumber(phoneNumber : String)
end

alt if the account is a customer
  as->cr:save(a : Customer)
else if the account is an organiser
  as->or:save(a : Organiser)
else if the account is an administrator
  as->ar:save(a : Administrator)
end

as-->ac:
deactivate as
ac->m2: addAttribute("account" : String, a : Account)
ac-->d:return "view-account"
deactivate ac
create nv2
d-> nv2:View(m2 : Model)
activate nv2

nv2-->d:
deactivate nv2

d-->w:return nv2
deactivate d

==4. The system displays the view account page (06-view-account) with the updated details of the account==

@enduml
