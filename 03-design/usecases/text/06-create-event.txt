@startuml
title Create Event - Basic Course of Events

actor "Organizer_and_Administrator" as OA
boundary "Web Browser" as w
boundary "__newView: View__" as view
boundary "__: DispatchServlet__" as d
entity "__model: Model__" as m
control ": __EventSystem__" as System
entity "__event: Event__" as Event

participant ": __EventService__" as Service
participant "__:EventRepository__" as repo
participant ": __VenueService__" as VenueSer
participant ":__VenueRepository__" as VenueRepo
entity "__v:Venue__" as venue
entity "__ta: TicketAvailability__" as ta
participant ":__AccountService__" as AccSer
participant "__:OrganizerRepository__" as organizerRepo


== 1. User navigates to create event page and enters event details ==
OA -> w: Click "Create Event"
activate w
w -> d: POST /createEvent (url: String, data: JSON)
activate d

note over d: The DispatchServlet handles request and\nparses data to generate EventDTO

d -> System: createEvent(name: String, description: String, date: Date, time: Time, venueId: int, creatorEmail: String, tickets: List, m: Model)
activate System

System -> VenueSer: venue := getVenue(venueId)
activate VenueSer
VenueSer -> VenueRepo: v:=findById(venueId: int)

VenueSer --> System: return v
deactivate VenueSer

System -> AccSer:account:=getAccount(creatorEmail)
activate AccSer
AccSer -> organizerRepo: a = findByEmail(email: String)

AccSer --> System: return a
deactivate AccSer

System -> VenueSer: isAvailable(venue, date)
activate VenueSer
VenueSer -> VenueRepo: null:=findVenueByDate(venue, date)

VenueSer --> System: return true
deactivate VenueSer

System -> VenueSer: isCapacityAvailable(venue, ticketsNum)
activate VenueSer
VenueSer -> venue: ta := getTicketAvailabilities()

loop all tickt type
    VenueSer -> ta: type := getType()
    VenueSer -> ta: num := getNumberAvailable()
end


VenueSer -> VenueSer: checkCapacity(capacity, ticketsNum)
VenueSer --> System: return true
deactivate VenueSer


System -> Service: createEvent(name: String, description: String, date: Date, time: Time, venue: Venue, creator: Organizer, tickets: List<Ticket>)
activate Service

create Event
Service -> Event: Event(name: String, description: String, date: Date, time: Time, venue: Venue, creator: Organizer, tickets: List)
activate Event
Event --> Service
deactivate Event


Service -> repo: save(event)

Service --> System: return Error.NONE
deactivate Service


System -> Service: getEvents()
activate Service
Service -> repo: findAll()

Service --> System: return events
deactivate Service


System -> m: addAttribute("events": String, events: Events[*])


System --> d: return "event_list_page"
deactivate System
create view
d -> view: View(model: Model)
activate view
view --> d
deactivate view


d --> w: return newView
deactivate d



== 2. System displays updated event list including the new event ==
@enduml