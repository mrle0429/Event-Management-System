@startuml
title Register Account - Basic Course of Events

actor "User" as us
boundary "Web Browser" as w
boundary "__newview:View__" as view
boundary "__:DispatchServlet__" as d
entity "__model: Model__" as m
control ": __AccountSystem__" as accountSys
entity "__user: User__" as userAcc
participant "__:UserRepository__" as accountRepo
participant ": __:AccountService__" as accountSer

== 1. The user clicks the "Register" button on the login page. (01- Login Page)\n2. The system navigates to the account creation page. (02 - register page)\n3. The user clicks the "register" button ==
us -> w: Click "Register"
activate w
w -> d: POST /registerAccount (url: String, data:JSON)
activate d 

note over d: The DispatchServlet is responsible for receiving requests \nand parsing the data to generate AccountDTO objects
d -> accountSys: registerAccount(email: String, name: String, password: String, modelï¼šModel)
activate accountSys



accountSys -> accountSer: createAccount(username: String, password: String, email: String, USER: AccountType)
activate accountSer
accountSer -> accountRepo: null:=findByEmail(email: String)
create userAcc
accountSer -> userAcc: User(username: String, password: String, email: String)
activate userAcc
userAcc --> accountSer: return user
deactivate userAcc

accountSer -> accountRepo: save(user)

accountSer --> accountSys: return user
deactivate accountSer


accountSys -> m: addAttribute("username": String, user: User)


accountSys --> d: return "userDashboardPage"
deactivate accountSys
create view
d -> view: View(modelï¼šModel)
activate view
view --> d
deactivate view
d --> w: return newView
deactivate d


== 4. The system returns to user dashboard page==
@enduml