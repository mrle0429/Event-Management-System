@startuml
title Create Account - account exists



actor "User" as us
boundary "Web Browser" as w
boundary "__: newView: View__" as view
boundary ":__DispatchServlet__" as d
entity "__m: Model__" as m
control ": __:AccountSystem__" as accountSys
participant "__: UserRepository__" as userRepo
participant "__: AdminRepository__" as adminRepo
participant "__: OrganizerRepository__" as organizerRepo
participant " __: AccountService__" as accountSer

== 1. The user clicks the "create" button .\n 2. The system navigates to the account creation page. \n 3. The user enters the required account details for the new user/Organizer/admin.  ==
us -> w: Click "Create Accout"
activate w
w -> d: POST /createAccount (url: String, data: JSON)
activate d

note over d: The DispatchServlet is responsible for receiving requests \nand parsing the data to generate AccountDTO objects
d -> accountSys: createAccount(type: accountType, name: String, password: String, m: Model)
activate accountSys

accountSys -> accountSer: getAccount(email: String)
activate accountSer
accountSer -> userRepo: a = findByEmail(email: String)

alt the value of a is null
    accountSer -> adminRepo: a = findByEmail(email: String)
end

alt the value of a is null
    accountSer -> organizerRepo: a = findByEmail(email: String)
end

accountSer --> accountSys: return Error.emailExisting
deactivate accountSer





accountSys -> m: addAttribute("errorMessage", "Account already exists")
accountSys --> d: renturn "accountCreationPage"
deactivate accountSys

create view
d -> view: View(model)
activate view
view --> d
deactivate view
d --> w: return newView
deactivate d



== 4. The system returns to the account creation page ==
@enduml