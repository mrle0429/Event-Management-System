@startuml class-diagram

    class Venue {
        - name : String
        - address : String
        - capacity : int
        - contactName : String
        - contactNumber : String
        - contactEmail : String
        {static} Venue(name : String, address : String, contactName : String, contactPhone : String, contactEmail : String, ticketAvailabilities : TicketAvailability[*])
        getTicketAvailabilities() : TicketAvailability[]
        setAddress(newAddress : String)
        setContactEmail(newEmail : String)
        setContactName(newName : String)
        setContactPhone(newPhone : String)
        setName(newName : String)
        setTicketAvailabilities(availabilities : TicketAvailability[])
        getAddress(newAddress : String) : String
        getContactEmail(newEmail : String) : String
        getContactName(newName : String) : String
        getContactPhone(newPhone : String) : String
        getName(newName : String) : String
    }

    class TicketAvailability {
        - type : String
        - numberAvailable : int
        {static} TicketAvailability(type : String, capacity : int)
        getName() : String
        getNumberAvailable() : int
    }

    class TicketQuantity {
        - numberSold
        - price
        {static} TicketQuantity(typeName, numAvailable, price)
        reduceQuantity(quantity)
    }


    class Event {
        - name : String
        - description : String
        - date : Date
        - time : Time
        {static} Event(eventName : String, eventDescription : String, eventDate : Date, eventTime : Date, venue : Venue, ticketQuantities : TicketQuantity[*])
        setDescription(newEventDescription : String)
        setTicketQuantities(newTicketQuantities : TicketQuantity[]) : int
        setTime(newEventTime : Date)
        getTicketQuantities() : TicketQuantity[]
        reduceQuantity(type : String, quantity : int) : int
    }

    class Ticket {
        - type : String
        - price : double
        - quantity : int
        +getPrice() : double
        +getType() : String
    }

    class Organiser {
        - address : String
        - companyName : int
        - phoneNumber : int
        {static}+Organiser(name : String, address : String,
        companyName : String, phoneNumber : String, email : String, password : String)
        +setAddress(address : String)
        +setCompanyName(companyName : String)
        +setPhoneNumber(phoneNumber : String)
        +getAddress(address : String) : String
        +getCompanyName(companyName : String) : int
        +getPhoneNumber(phoneNumber : String) : int
    }

    class Administrator {
        {static}+Administrator(name, email, password)
    }

    class User {
        {static} User(name : String, email : String, password : String)
        getTickets() : Ticket[]
        addTickets(tickets : Ticket[]) : int
    }

    abstract class Account {
        - name : String
        - password : String
        - email : String
        - role : String
        +setName(name : String) : int
        +setEmail(email : String) : int
        +setPassword(password : String) : int
        +setRole() : String
        +getRole() : String
        +getName() : String
        +getEmail() : String
    }

    class EventDTO {
        - name : String
        - description : String
        - date : Date
        - time : Time
        - venue : VenueDTO
        {static} EventDTO(eventName : String, eventDescription : String, eventDate : Date, eventTime : Time, venue : VenueDTO)
        getName() : String
        getDescription() : String
        getDate() : Date
        getTime() : Time
        getVenue() : VenueDTO
    }


    class VenueDTO {
        - name : String
        - address : String
        - capacity : int
        - contactName : String
        - contactNumber : String
        - contactEmail : String
        {static} VenueDTO(name : String, address : String, contactName : String, contactPhone : String, contactEmail : String)
        getName() : String
        getAddress() : String
        getCapacity() : int
        getContactName() : String
        getContactPhone() : String
        getContactEmail() : String
    }

    class AccountSystem {
        createAccount(type: AccountType, username: String, password: String, email: String)
        getAccount(email : String, accountType : accountType) : Account
        listAccounts() : Account[]
        modifyAccount(adto : ModifyAccountDTO, a : Account)
        registerAccount(email: String, name: String, password: String, model: Model)
        viewAccount(email : String) : Account
    }

    class EventSystem {
        createEvent(name: String, description: String, date: Date, time: Time, venueiD: INT, creator: Organiser, tickets: List<Ticket>, m: Model) : Event
        createVenue(name: String, address: String, contact: String, totalCapacity: int, standingNum: int, seatingNum: int, preminumNum: int, model: Model) : Venue
        deleteEvent(eventName : String, eventDate : Date)
        deleteVenue(venueName : String)
        listEvents() : Event[]
        listMyEvents(organiserEmail : String) : Event[]
        listMyTickets(userEmail : String) : Ticket[]
        listVenues() : Venue[]
        ModifyEventDTO(event : Event) : ModifyEventDTO
        ModifyVenueDTO(venue : Venue) : ModifyVenueDTO
        viewEvent(eventName : String, eventDate : Date) : Event
        buyTicket(eventId: int, userEmail: String, types: String[], num: int[], m: Model) : Ticket[]
        viewTicket(eventName : String, date : Date, type : String) : Ticket
    }

    class AccountService {
        getAccount(email : String) : Account
        getAccounts() : Account[]
        modifyAccount(modifyDTO : ModifyAccountDTO, account : Account)
    }

    class ModifyAccountDTO {
        - name : String
        - email : String
        - password : String
        {static} ModifyAccountDTO(name : String, email : String, password : String)
        getName() : String
        getEmail() : String
        getPassword() : String
        setName(newName : String)
        setEmail(newEmail : String)
        setPassword(newPassword : String)
    }

    class EventService {
        +createEvent(name : String, description : String,
        date : Date, time : Time, venue : Venue, creator : Organiser, tickets : List<Ticket>) : Event
        +deleteEvent(eventName : String, eventDate : Date) : int
        +getEvent(eventName : String, eventDate : Date) : Event
        +getEvents() : Event[]
        +isAvailable(event : Event, date Date) : boolean
        +modifyEvent(eventName : String, eventDate : Date, newEventDescription : String,
        newEventTime : Time, newTicketTypes : String[], newTicketPrices : double[]) : int
    }

    class VenueService {
        +createVenue(name : String, address : String, contact : String, totalCapacity : int, standingNum : int,
        seatingNum : int, preminumNum : int) : Venue
        +deleteVenue(venueName : String)
        +getVenue(venueName : String) : Venue
        +getVenues() : Venue[]
        +isAvailable(Venue : Venue, date Date) : boolean
        +modifyVenue(name : String, newName : String, newAddress : String, newContactName : String,
        newContactPhone : String, newContactEmail : String, newTicketTypes : String[], newTicketCapacities : int[]) : int
    }

    class TicketService {
        +isAvailable(event : Event, types : String[], quantities : int[]) : boolean
        +getTicket(eventName: String,eventDate: Date, type: TicketType) : Tikcet
        +buyTickets(event : Event, types : String[], quantities : int[], prices : double[]) : Ticket[]
    }

    class AdminAccountRepository {
        +save(a : Customer)
        +getAccountByEmail(email : String) : Administrator
        +getAllAccounts() : Customer[]
    }

    class OrganiserAccountRepository {
        +save(a : Organiser)
        +getAccountByEmail(email : String) : Organiser
        +getAllAccounts() : Organiser[]
    }

    class UserAccountRepository {
        +save(a : Administrator)
        +getAccountByEmail(email : String) : User
        +getAllAccounts() : Administrator[]
    }

    class EventRepository {
        saveEvent(event : Event)
        getEventByNameAndDate(eventName : String, eventDate : Date) : Event
        getAllEvents() : Event[]
    }

    class VenueRepository {
        saveVenue(venue : Venue)
        getVenueByName(venueName : String) : Venue
        getVenueById(venueId : int) : Venue
        getAllVenues() : Venue[]
    }

    class TicketRepository {
        saveTicket(ticket : Ticket)
        getTicketsByUser(userEmail : String) : Ticket[]
        getTicketsByEvent(eventName : String, eventDate : Date) : Ticket[]
    }

    enum Role {
        +ADMINISTRATOR
        +ORGANISER
        +USER
    }

    enum Error {
        +DUPLICATE_EMAIL
        +NONE
    }

    enum TicketType {
        +VIP
        +STANDING
        +SEATING
    }

    AccountSystem "1" --> "-accountService 1" AccountService

    AccountService "1" --> "-admin *" AdminAccountRepository
    AccountService "1" --> "-organiser *" OrganiserAccountRepository
    AccountService "1" --> "-user *" UserAccountRepository

    EventSystem "1" --> "-eventService 1" EventService
    EventSystem "1" --> "-venueService 1" VenueService
    EventSystem "1" --> "-ticketService 1" TicketService

    VenueService "1" --> "-venues *" VenueRepository

    TicketService "1" --> "-events *" EventRepository
    TicketService "1" --> "-tickets *" TicketRepository

    EventService "1" --> "-events *" EventRepository
    EventService "1" --> "-venues *" VenueRepository
    EventService "1" --> "-tickets*" TicketRepository

    AccountSystem .UP.> ModifyAccountDTO
    EventSystem .UP.> EventDTO
    EventSystem .UP.> VenueDTO

    AdminAccountRepository "<<import>>" ..>  Account
    OrganiserAccountRepository "<<import>>" ..>  Account
    UserAccountRepository "<<import>>" ..>  Account
    EventRepository "<<import>>" ..>  Event
    TicketRepository "<<import>>" ..> Ticket
    VenueRepository "<<import>>" ..> Venue

    Organiser --|> Account
    Administrator --|> Account
    User --|> Account

    TicketQuantity --|> TicketAvailability

    Venue "1" --> "-ticketAvailabilities *" TicketAvailability
    Event "1" ---> "-ticketQuantities *" TicketQuantity
    Event ---> "-venue 1" Venue
    Event "1" ---> "-organiser 1" Organiser
    Organiser "1" ---> "-events *" Event
    Ticket "1" -> "-event 1" Event
    Ticket "-tickets *" <-- "1" User
@enduml
